#include <iostream>
#include <cstdlib>

using namespace std;

// Type definition
typedef int* IntPtr;

// Constantslabsize[0] is the # of computers in lab1,
int NUMLABS = 4;

// Function prototypes

/*
 Creates the dynamic arrays for the labs.
 @param labs: the array of labs,
 @param labsizes: contains the size (or number of computers) of each lab
  This dictates the size of the dynamic array.
 @precondition: labsize[0] is the # of computers in lab1,
                labsize[1] is the # of computers in lab2, ...
 @postcondition: labs[0] points to lab1's array (of size given by labsize[0])
      labs[1] points to lab2's array (of size given by labsize[1])
        ...
*/
void createArrays(IntPtr labs[], int labsizes[]);

/* 
freeArrays:
Releases memory we allocated with "new".
*/
void freeArrays(IntPtr labs[]);


/*
showLabs:
Displays the status of all labs (who is logged into which computer).
*/
void showLabs(IntPtr labs[], int labsizes[]);


// ======================
// login:
// Simulates a user login by asking for the login info from
// the console.
// ======================
void login(IntPtr labs[], int labsizes[]);


// ======================
// logout:
// Searches through the arrays for the input user ID and if found
// logs that user out.
// ======================
void logout(IntPtr labs[], int labsizes[]);


// ======================
// search:
// Searches through the arrays for the input user ID and if found
// outputs the station number.
// ======================
void search(IntPtr labs[], int labsizes[]);


// ======================
//     main function
// ======================
int main()
{
        //IntPtr labs[NUMLABS];         // store the pointers to the dynamic array for each lab
        //int labsizes[NUMLABS];        // Number of computers in each lab
        int choice = -1;
        cout <<"Welcome to the LabMonitorProgram!\n";
        cout << "How many labs are you managing?" << endl;
        cin>>NUMLABS;
        if (NUMLABS <1)
        {
                cout << "Invalid Input! Setting default to 4 labs"<< endl;
                NUMLABS=4;
        }
        IntPtr* labs= new IntPtr[NUMLABS];
        IntPtr labsizes=new int[NUMLABS];

        // Prompt the user to enter labsizes 
        cout <<"Please enter the number of computer stations in each lab:\n";
        for (int i=0; i< NUMLABS; i++)
        {
                do
                {
                        cout <<"How many computers in Lab "<< i+1<<"?";
                        cin >> labsizes[i];
                } while (labsizes[i]<0);
        }

        // Create ragged array structure
        createArrays(labs, labsizes);

        // Main Menu
        while (choice != 0)
        {
                cout << endl;
                showLabs(labs, labsizes);
                cout << "MAIN MENU" << endl;
                cout << "0) Quit" << endl;
                cout << "1) Simulate login" << endl;
                cout << "2) Simulate logout" << endl;
                cout << "3) Search" << endl;
                cin >> choice;
                if (choice == 1)
                {
                        login(labs, labsizes);
                }
                else if (choice == 2)
                {
                        logout(labs, labsizes);
                }
                else if (choice == 3)
                {
                        search(labs, labsizes);
                }
        }

        freeArrays(labs);               // Free memory before exiting
        return 0;
}
void createArrays(IntPtr labs[], int labsizes[])
{

        for (int i=0; i<NUMLABS; i++)
        {
                labs[i] = new int[labsizes[i]];
                for(int j=0; j<labsizes[i];j++)
                {
                        labs[i][j] = -1;
                }
        }

}
  //Hint: for each of the 4 labs, dynamically
  //   allocate an int array of size given by the number of computers in the lab. 
  //   initialize each element in the array as -1 (unused computer).
  //   store the array in the labs 
void freeArrays(IntPtr labs[])
{
        for (int i=0; i<NUMLABS; i++)
        {
                delete labs[i]; // free memory
        }
}
void showLabs(IntPtr labs[], int labsizes[])
{

        int i;
        int j;

        cout << "LAB STATUS" << endl;
        cout << "Lab #     Computer Stations" << endl;
        for (i=0; i < NUMLABS; i++)
        {
                cout << i+1 << "         ";
                for (j=0; j < labsizes[i]; j++)
                {
                        cout << (j+1) << ": ";
                        if (labs[i][j] == -1) // set every computer station in every lab to -1
                        {
                                cout << "empty ";
                        }
                        else
                        {
                                cout << labs[i][j] << " ";
                        }
                }
                cout << endl;
        }
        cout << endl;
        return;
}
void login(IntPtr labs[], int labsizes[])
{
        int id, lab, num = -1;

        // read user id 
        do
        {
                cout << "Enter the 5 digit ID number of the user logging in:" << endl;
                cin >> id;
        } while ((id < 0) || (id > 99999));

        // read the lab number 
        do
        {
                cout << "Enter the lab number the user is logging in from (1-" <<
                        NUMLABS << "):" << endl;
                cin >> lab;
        } while ((lab < 0) || (lab > NUMLABS));

        //read computer number 
        do
        {
                cout << "Enter computer station number the user is logging in to " <<
                        "(1-" << labsizes[lab-1] << "):" << endl;
                cin >> num;
        } while ((num < 0) || (num > labsizes[lab-1]));

        // Check to see if this station is free
        if (labs[lab-1][num-1]!=-1)
        {
                cout << "ERROR, user " << labs[lab-1][num-1] <<
                        " is already logged into that station." << endl;
                return;
        }
        // Assign this station to the user
        labs[lab-1][num-1] = id;
        return;
}
void logout(IntPtr labs[], int labsizes[])
{
        int id, lab, num = -1;

        // Get an ID from the keyboard, validating data ranges (0 - 99999)
        //read user id
          do{
                cout<< "Enter the 5 digit ID number of the user logging out:" << endl;
                cin>> id;
        } while ((id<0) || (id > 99999));

        // read the lab number
        do{
                cout << "Enter lab number the user is logging out of (1-" << NUMLABS <<" ) :"<< endl;
                cin>> lab;
        } while ((lab<0) || (lab > NUMLABS));

        // read computer number
        do{
                cout << "Enter the computer station number that the user is logging out of"<< "(1-" << labsizes[lab-1] << "):"<< endl;
                cin>> num;
        }while ((num<0) || (num > labsizes[lab-1]));

    // Check each computer in each labs for the matching ID. 
    // Loop the  the labs one by one and for each lab, loop the computers in that lab.
        for (int i=0; i<NUMLABS;i++)
        {
                        if (labs[lab-1][num-1] == id)
                        {
                                labs[lab-1][num-1] = -1; // set match computer to -1
                                break;
                        }
                        else
                        {
                                cout << "User number " << id << " is not logged in to a computer in lab " << lab << "." << endl;
                                break;
                        }

        }
}
void search(IntPtr labs[], int labsizes[])
{
        int id, temp=0;
        // have user input which id number they would like to search
        cout << " Please enter the 5-digit id number that you would like to search for " << endl;
        cin>>id;

        for(int i=0; i<NUMLABS;i++)
        {
                for (int j=0; j< labsizes[i];j++) // iterate over both arrays
                {

                        if(labs[i][j] == id) // check to see if the id is in any of the computer stations (j) of any of the labs (i)
                        {
                                temp=1;
                                cout << "User number " << id << " is using computer station number " << j+1 << " in lab number " << i+1 << " ." << endl;
                                break;
                        }
                }
        }
        if (temp!=1)
        {
                cout << " User number "<< id << " is not using any of the computer stations."<< endl;
        }


}


                        
